apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: bluegreen
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: ${APP_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: release-01
        uri: https://github.com/ghoelzer-rht/bluegreen.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: php:7.0
          namespace: openshift
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": ${APP_NAME}, "namespace": "",
        "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_NAME}-pipeline
    name: ${APP_NAME}-pipeline
  spec:
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
          stage 'build'
          openshiftBuild(buildConfig: ${APP_NAME}, showBuildLogs: 'true')
          stage 'deploy'
          openshiftDeploy(deploymentConfig: ${APP_BUILD_DEPLOYMENT})
          stage 'test'
          sh 'curl <UPDATE with BUILD DEPLOYMENT ROUTE> | grep -i "Welcome to an OpenShift Application version 1.10"'
          stage 'tag image'
          openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: ${APP_NAME}, destTag: 'next-release', destinationAuthToken: '', destinationNamespace: '', namespace: '', srcStream: ${APP_NAME}, srcTag: 'latest', verbose: 'false'
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": ${APP_NAME}, "namespace": "",
        "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      name: ${APP_NAME}-promote
    name: ${APP_NAME}-promote
  spec:
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          node('maven') {
          stage 'promote release'
          openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: ${APP_NAME}, destTag: 'current-release', destinationAuthToken: '', destinationNamespace: '', namespace: '', srcStream: ${APP_NAME}, srcTag: 'next-release', verbose: 'false'
          stage 'deploy'
          openshiftDeploy(deploymentConfig: ${APP_NAME})
          stage 'smoke test side 1'
          sh 'curl <UPDATE with LIVE/RELEASE ROUTE> | grep -i "Welcome to an OpenShift Application version 1.10"'
          stage 'smoke test side 2'
          sh 'curl <UPDATE with LIVE/RELEASE ROUTE> | grep -i "Welcome to an OpenShift Application version 1.10"'
          }
      type: JenkinsPipeline
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
    creationTimestamp: null
    generation: 1
    labels:
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    replicas: 1
    selector:
      name: jenkins
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: jenkins
      spec:
        containers:
        - env:
          - name: OPENSHIFT_ENABLE_OAUTH
            value: "true"
          - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
            value: "true"
          - name: KUBERNETES_MASTER
            value: https://kubernetes.default:443
          - name: KUBERNETES_TRUST_CERTIFICATES
            value: "true"
          - name: JNLP_SERVICE_NAME
            value: jenkins-jnlp
          image: registry.access.redhat.com/openshift3/jenkins-2-rhel7:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 30
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 420
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: jenkins
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /login
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 500m
              memory: 1G
            requests:
              cpu: 250m
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/jenkins
            name: jenkins-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        serviceAccount: jenkins
        serviceAccountName: jenkins
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: jenkins-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - jenkins
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APP_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ${APP_NAME}:current-release
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 4
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 6
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 64Mi
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_BUILD_DEPLOYMENT}
    name: ${APP_BUILD_DEPLOYMENT}
  spec:
    replicas: 1
    selector:
      app: ${APP_BUILD_DEPLOYMENT}
      deploymentconfig: ${APP_BUILD_DEPLOYMENT}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          app: ${APP_BUILD_DEPLOYMENT}
          deploymentconfig: ${APP_BUILD_DEPLOYMENT}
      spec:
        containers:
        - image: ${APP_NAME}:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 4
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APP_BUILD_DEPLOYMENT}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 6
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: ${APP_RELEASE_DEPLOYMENT}
    name: ${APP_RELEASE_DEPLOYMENT}
  spec:
    replicas: 1
    selector:
      app: ${APP_RELEASE_DEPLOYMENT}
      deploymentconfig: ${APP_RELEASE_DEPLOYMENT}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftWebConsole
        creationTimestamp: null
        labels:
          app: ${APP_RELEASE_DEPLOYMENT}
          deploymentconfig: ${APP_RELEASE_DEPLOYMENT}
      spec:
        containers:
        - image: ${APP_NAME}:next-release
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 4
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APP_RELEASE_DEPLOYMENT}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 6
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_RELEASE_DEPLOYMENT}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:next-release
          namespace: ${NAMESPACE}
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "jenkins-jnlp", "namespace":
        "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    creationTimestamp: null
    labels:
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    ports:
    - name: web
      port: 80
      protocol: TCP
      targetPort: 8080
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      template: jenkins-ephemeral-template
    name: jenkins-jnlp
  spec:
    ports:
    - name: agent
      port: 50000
      protocol: TCP
      targetPort: 50000
    selector:
      name: jenkins
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APP_NAME}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APP_BUILD_DEPLOYMENT}
    name: ${APP_BUILD_DEPLOYMENT}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APP_BUILD_DEPLOYMENT}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: ${APP_RELEASE_DEPLOYMENT}
    name: ${APP_RELEASE_DEPLOYMENT}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: ${APP_RELEASE_DEPLOYMENT}
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      template: jenkins-ephemeral-template
    name: jenkins
  spec:
    host: ${APP_JENKINS_ROUTE_HOSTNAME}
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: jenkins
      weight: 100
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    alternateBackends:
    - kind: Service
      name: ${APP_RELEASE_DEPLOYMENT}
      weight: 0
    host: ${APP_RELEASE_ROUTE_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 256
    wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    labels:
      app: ${APP_BUILD_DEPLOYMENT}
    name: ${APP_BUILD_DEPLOYMENT}
  spec:
    host: ${APP_BUILD_ROUTE_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APP_BUILD_DEPLOYMENT}
      weight: 100
    wildcardPolicy: None
parameters:
- description: Application Name
  displayName: Application
  name: APP_NAME
  required: true
  value: php-bluegreen
- description: Application Build Deployment Name
  displayName: Application Build Deployment
  name: APP_BUILD_DEPLOYMENT
  required: true
  value: php-bluegreen-build
- description: A secret string used to configure the GitHub webhook.
  displayName: GitHub Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook.
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- description: Path to saved JSON file with configuration for the gateway. Has to
    be injected to the docker image as read only volume.
  name: THREESCALE_CONFIG_FILE
- description: Name for the 3scale API Gateway
  name: THREESCALE_GATEWAY_NAME
  required: true
  value: threescalegw
- description: Docker image to use.
  name: THREESCALE_GATEWAY_IMAGE
  required: true
  value: rhamp10/apicast-gateway:1.0.0-4
- description: DNS Resolver for openresty, if empty it will be autodiscovered
  name: RESOLVER
- description: Subset of services to run. Use comma separated list of service ids
    (eg. 42,1337)
  name: APICAST_SERVICES
- description: 'What to do on missing or invalid configuration. Allowed values are:
    log, exit.'
  name: MISSING_CONFIGURATION
  value: exit
- description: 'Log level. One of the following: debug, info, notice, warn, error,
    crit, alert, or emerg.'
  name: APICAST_LOG_LEVEL
- description: Enable path routing. Experimental feature.
  name: PATH_ROUTING
  value: "false"
- description: Enable traffic logging to 3scale. Includes whole request and response.
  name: REQUEST_LOGS
  value: "false"
- description: Enable logging response codes to 3scale.
  name: RESPONSE_CODES
  value: "false"
- description: Reload config on every request
  name: APICAST_RELOAD_CONFIG
  value: "false"
